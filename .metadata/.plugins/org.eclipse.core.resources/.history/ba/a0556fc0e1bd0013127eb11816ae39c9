package s260469756.mytools;

import halma.CCBoard;
import halma.CCMove;

import java.awt.Point;
import java.util.ArrayList;

import boardgame.Board;

public class MyTools {

	final static Point[] base0Points={
		new Point(0,0), new Point(1,0), new Point(2,0), new Point(3,0),
		new Point(0,1), new Point(1,1), new Point(2,1), new Point(3,1),
		new Point(0,2), new Point(1,2), new Point(2,2), new Point(0,3), new Point(1,3)};
	final static Point[] base2Points={
		new Point(0,15), new Point(1,15), new Point(2,15), new Point(3,15),
		new Point(0,14), new Point(1,14), new Point(2,14), new Point(3,14),
		new Point(0,13), new Point(1,13), new Point(2,13), new Point(0,12), new Point(1,12)};
	final static Point[] base1Points={
		new Point(15,0), new Point(14,0), new Point(13,0), new Point(12,0),
		new Point(15,1), new Point(14,1), new Point(13,1), new Point(12,1),
		new Point(15,2), new Point(14,2), new Point(13,2), new Point(15,3), new Point(14,3)};
	final static Point[] base3Points={
		new Point(15,15), new Point(14,15), new Point(13,15), new Point(12,15),
		new Point(15,14), new Point(14,14), new Point(13,14), new Point(12,14),
		new Point(15,13), new Point(14,13), new Point(13,13), new Point(15,12), new Point(14,12)};
	
	private static Point base;
	private static Point goal;
	private static Point[] basePoints; 
	private static Point[] goalPoints;
	
	// My id 
	private static int myID;
	// 15*8+14*8+13*6+12*4
	private static int MHD = 358;
	
	/* WORKS */
	public static void initCorner(int playerID) {
    	myID = playerID;
		switch (playerID) { // Determine starting corner
			case 0: // Top left
				base = new Point(0,0);
				goal = new Point(15,15);
				basePoints = base0Points;
				goalPoints = base3Points;
				break;
			case 1: // Bottom left
				base = new Point(15,0);
				goal = new Point(0,15);
				basePoints = base1Points;
				goalPoints = base2Points;
				break;
			case 2: // Top right
				base = new Point(0,15);
				goal = new Point(15,0);
				basePoints = base2Points;
				goalPoints = base1Points;
				break;
			case 3: // Bottom right
				base = new Point(15,15);
				goal = new Point(0,0);
				basePoints = base3Points;
				goalPoints = base0Points;
				break;
    	}
	}
		
	/*
	 * Core function, get the moves to the optimal state for the given turn.
	 */
	public static ArrayList<CCMove> getMovesForTurn(Board theboard) {
		CCBoard rootBoard = (CCBoard) theboard.clone();
		ArrayList<State> firstStates = firstLevelStates((CCBoard) rootBoard.clone());
		System.out.println("NUMBER OF FIRST LEVEL STATES CALCULATED: " + firstStates.size());
		
		State bestState = firstLevelBestState(firstStates);
		ArrayList<CCMove> moves = fastGetMovesToState(bestState);
		moves.add(new CCMove(myID,null,null)); // Add the end turn move
		
		return moves;
	}
	
	
	public static int pointsInGoal(CCBoard board) {
		int inGoal = 0;
		Integer player_id; 
		for (Point p: goalPoints) {
			player_id = board.getPieceAt(p);
			if (player_id != null && player_id == myID)
				inGoal += 1; 
		}	
		return inGoal; 
	}
	
	/*
	 * Evaluate a particular board state.
	 * Better boards have a higher evaluation.
	 */
	private static int evaluate(int player_id, CCBoard board) {
		if (player_id == myID) {
			ArrayList<Point> myPieces = board.getPieces(myID);
			int sum = 0; 
			for (Point p : myPieces) {
				sum += manhattanDistanceToGoal(p);
				//sum += manhattanDistanceToDiagonal(p);
			}
			
			return MHD - sum;
		}
		return 0;
		
	}
	
	/*
	 * Get the Manhattan distance to the diagonal
	 */
	private static int manhattanDistanceToDiagonal(Point p) {
		if (myID == 0 || myID == 3)
			return Math.abs(p.x - p.y);
		return Math.abs(15 - (p.x + p.y));
	}
	
	/*
	 * Get the Manhattan distance to the goal point
	 */
	private static int manhattanDistanceToGoal(Point p) {
		return Math.abs(goal.x - p.x) + Math.abs(goal.y - p.y);
	}
	
	/*
	 * Hop moves states need to have their turns ended
	 */
	private static ArrayList<State> firstLevelStates(CCBoard root) {
		ArrayList<State> states = new ArrayList<State>(); 
		ArrayList<CCMove> moves, pointMoves;
		ArrayList<Point> visited = new ArrayList<Point>();
		ArrayList<Point> pieces = root.getPieces(myID);
		
		State rootState = new State(root,null,null);
		State lastState;
				
		for (Point p : pieces) {
			moves = root.getLegalMoveForPiece(p, myID);
			visited.add(p); // Add the initial point for the move as visited
			for (CCMove move : moves) {
				if (!visited.contains(move.getTo())) {
					if (!move.isHop()) {
						states.add(rootState.generateNextState(move));
						visited.add(move.getTo());
					}
					else { // Hop Move
						int queueHead = states.size();
						
						lastState = rootState.generateNextState(move);
						states.add(lastState);
						visited.add(move.getTo());
						
						while (queueHead != states.size()) {
							lastState = states.get(queueHead);
							queueHead += 1;
							pointMoves = lastState.board.getLegalMoveForPiece(lastState.board.getLastMoved(), myID);
							//lastState.board.move(new CCMove(myID,null,null)); // End turn for hop move
							for (CCMove m : pointMoves) {
								if (m.isHop() && !visited.contains(m.getTo())) {
									states.add(lastState.generateNextState(m));
									visited.add(m.getTo());
								}
							}	
							// Done with last state, end its turn
							lastState.board.move(new CCMove(myID,null,null)); 
						}
					}
				}
			}
			visited.clear();
		}
		
		return states;
	}
	
	/*
	 *	Determine the best state to move to based on the heuristic 
	 */
	private static State firstLevelBestState(ArrayList<State> states) {
		State bestState = states.get(0); // init
		int bestEval = 0; 
		for (State s : states) {
			CCMove finalMove = s.lastMove;
			Point endPoint = s.lastMove.getTo(); //s.board.getLastMoved();
			int eval = evaluate(myID,s.board);

			// Lower eval if piece is moving away from center diagnonal
			if (endPoint != null) {
				eval -= manhattanDistanceToDiagonal(endPoint); 
			}
			
			if (eval > bestEval || (eval == bestEval && finalMove.isHop())) {
				bestEval = eval;
				bestState = s;
			}

			
		}
		return bestState;
	}
	
	/*
	 * Backtrack the state to build the series of moves to reach it
	 */
	private static ArrayList<CCMove> fastGetMovesToState(State state) {
		State currentState = state;
		ArrayList<CCMove> movesToState = new ArrayList<CCMove>();
		
		while (currentState != null) {
			movesToState.add(0,currentState.lastMove);
			currentState = currentState.lastState;
		}
		movesToState.remove(0);
		
		return movesToState;
	}
	
	


}


