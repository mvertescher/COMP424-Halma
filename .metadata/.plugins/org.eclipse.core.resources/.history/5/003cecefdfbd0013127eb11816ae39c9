package s260469756;

import halma.CCBoard;
import halma.CCMove;

import java.util.ArrayList;
import java.util.Random;

import s260469756.mytools.MyTools;

import java.awt.Point;

import boardgame.Board;
import boardgame.Move;
import boardgame.Player;

/**
 *A random Halma player.
 */
public class s260469756Player extends Player {
    Random rand = new Random();
    
    /** Provide a default public constructor */
    public s260469756Player() { super("260469756"); }
    public s260469756Player(String s) { super(s); }
    
    public Board createBoard() { return new CCBoard(); }


    
    public void gameStarted( String msg ) { 
    	System.out.println( "Game started: " + msg ); 
    	System.out.println( "Player id: " + this.playerID );
    	MyTools.initCorner(this.playerID);
    	
    }
    
    ArrayList<CCMove> thisTurnsMoves; // 0 - first move to n-1 last move
    
    long startTime;
    long endTime;
    
    /** Implement a very stupid way of picking moves */
    public Move chooseMove(Board theboard) 
    {
    	CCBoard board = (CCBoard) theboard;
    	Point lastMovedPiece = board.getLastMoved();
    	
    	
    	// Beginning of turn
    	if (lastMovedPiece == null) {
    		startTime = System.currentTimeMillis();
    		System.out.println("Starting Watch");
    		System.out.println("Turns Played: " + board.getTurnsPlayed());
    		 		
    		/* Modular line, replace for differnet agent */ 
    		thisTurnsMoves = MyTools.minMax(theboard);
   
    		CCMove firstMove = thisTurnsMoves.remove(0);
    		
    		return firstMove;
    	}
    	
    	// End of turn 
    	else {
    		//printMoves(board.getLegalMoveForPiece(lastMovedPiece, this.playerID));
    		if (thisTurnsMoves.size() == 1) { // If there is one move left to make
    			long endTime = System.currentTimeMillis() - startTime;
    			System.out.println("TURNTIMER ENDING: " + endTime + "Millis");
    		}
    		return thisTurnsMoves.remove(0);
    	}
    	
    }
    
    
}
